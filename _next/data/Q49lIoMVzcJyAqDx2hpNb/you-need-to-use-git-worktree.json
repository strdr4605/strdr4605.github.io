{"pageProps":{"postData":{"title":"You need to use Git worktree","date":"2022-03-16T00:00:00.000Z","description":"A basic guide on why and how to use Git worktree feature.","tags":["git"],"slug":"you-need-to-use-git-worktree","contentHtml":"<p>Recently I found <code>git worktree</code> feature and I plan to use it in all my projects.\nHere is why and how you can use it.</p>\n<h2>Why</h2>\n<p>If you are working on a big project with a lot of issues and tasks, you constantly have to switch between branches to do some quick-fix changes or maybe review a PR from a teammate.\nThe problem is that often you have some work in progress and switching branches means that you need to commit or stash your WIP changes.\nIf it's only 1-2 files/changes the cost of commit/stash is not that high. But if you work on a big feature with over 9000 changes it's hard to constantly change branches.</p>\n<h2>How</h2>\n<p>Basically <code>git worktree</code> command allows to create a new directory with desired git state.<br>\nActually, your current workspace is already in git worktree.<br>\nYou can type <code>git worktree list</code> and you will see one item, which is your current git workspace.</p>\n<p>Let's say you work on a big feature in your work project.</p>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> worktree list\n~/Work/project  17d8aab <span class=\"token punctuation\">[</span>big-feature<span class=\"token punctuation\">]</span>\n</code></pre></div>\n<p>And a quick-fix needs to be done from the <code>origin/master</code>.\nYou can create a git worktree with the following command:</p>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> worktree <span class=\"token function\">add</span> -b quick-fix <span class=\"token punctuation\">..</span>/quickfix origin/master\n</code></pre></div>\n<p>This command will create a new directory named <strong>quickfix</strong> at the same level as your <strong>project</strong> directory.<br>\nThe branch will be <code>quick-fix</code> and it will be set at commit from <code>origin/master</code>.<br>\nYou can see your git worktree:</p>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> worktree list\n~/Work/project   17d8aab <span class=\"token punctuation\">[</span>big-feature<span class=\"token punctuation\">]</span>\n~/Work/quickfix  25e6c4b <span class=\"token punctuation\">[</span>quick-fix<span class=\"token punctuation\">]</span>\n</code></pre></div>\n<p>Next, you can navigate to <strong>quickfix</strong> directory, do your changes, push to remote, merge.</p>\n<p>After you are done with <strong>quickfix</strong> you can remove the workspace with <code>git worktree remove quickfix</code>.</p>\n<h2>Conclusion</h2>\n<p>This approach of using git worktree is not the most elegant but it's doing the job.\nI might change the workflow (using bare git repos instead of normal repos) and will update this post.\nFor now you may check <a href=\"https://morgan.cugerone.com/blog/how-to-use-git-worktree-and-in-a-clean-way/\">How to use git worktree and in a clean way</a>.</p>\n<p>But I suggest to play a bit with git worktree if you have problems from <strong>Why</strong> section. And adding this git feature to your toolkit will make you a more productive engineer.</p>\n<blockquote>\n<p>Let me know if you have a nice workflow for git worktree!</p>\n</blockquote>\n"},"_superjson":{"values":{"postData.date":["Date"]}}},"__N_SSG":true}