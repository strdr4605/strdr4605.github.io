{"pageProps":{"postData":{"title":"How I use Git","date":"2021-04-02T00:00:00.000Z","description":"My daily use of Git. What Git commands I usually use. Tips and tricks that I use every day.","tags":["development","tools"],"slug":"how-i-use-git","contentHtml":"<p>Nowadays almost every software engineer is using Git as a version control system for their projects.\nThere are a lot of GUI apps for working with Git, also integrations with IDEs and text editors.\nI know engineers that are using Git only from their IDE. But no matter what, one day you have to use Git from the command line.</p>\n<p>When I started using Git the first time I used it from the command line and at the beginning, I felt like a cool engineer working with the terminal.\nSo I decided to stick with this approach as usually from IDE it's not possible to do everything that Git is capable of.\nMaybe a more realistic reason is that I never worked with rich IDEs with support for Git.\nAlthough nowadays I use VSCode and sometimes I reach its integration with Git.</p>\n<p>This is not a beginner guide on how to use Git, it's just my daily use of it.\nIf you are using Git from the command line or trying to switch from GUI to the command line some of these tips may be helpful for you.</p>\n<h2>Git history</h2>\n<p>Usually when I open a project first thing that I do is looking into Git history to see what was done and where I am in the commits history.\nGit doesn't have a beautiful way to show the history and many engineers that I know are using GUI to see a clear picture of the history.\nBut if you don't use Merge commits even a simple <code class=\"language-unknown\">git log</code> is clear to understand.</p>\n<p>My command for showing Git history is:</p>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> log <span class=\"token parameter variable\">--oneline</span> <span class=\"token parameter variable\">--all</span> <span class=\"token parameter variable\">--graph</span>\n</code></pre></div>\n<p>You can look at what all these arguments do at <a href=\"https://www.git-scm.com/docs/git-log\">git-log docs</a>.\nBasically, it prints the history in this format:</p>\n<p><img src=\"git-log.png\" alt=\"git-log\"></p>\n<p>I can see my current location <strong><code class=\"language-unknown\">HEAD</code></strong>, also local and remote branches. <br/>\nI run <code class=\"language-unknown\">git log --oneline --all --graph</code> almost every time with other commands that I use.</p>\n<h2>Git Aliases vs Ctrl + R</h2>\n<p>Of course, typing <code class=\"language-unknown\">git log --oneline --all --graph</code> every time takes a lot of time.\nFor these cases, people usually set <a href=\"https://git-scm.com/book/en/v2/Git-Basics-Git-Aliases\">Git Aliases</a>.\nBut this means that you need to configure aliases on every new machine that you work on. You may use <a href=\"https://dotfiles.github.io\">dotfiles</a>.</p>\n<p>I got used to doing a search using <strong>Ctrl + R</strong> where I type <code class=\"language-unknown\">gra</code> and <code class=\"language-unknown\">git log --oneline --all --graph</code> appears as a last used command.\nI also use <strong>Ctrl + R</strong> for any other long command that I need again, so you may consider <strong>Ctrl + R</strong> over Git Aliases.</p>\n<h2>Synchronizing with remote</h2>\n<blockquote>\n<p>Note: I <a href=\"https://strdr4605.com/stop-doing-git-checkout-master-branch\">don't do git checkout master anymore</a></p>\n</blockquote>\n<p>When I start a new task and need to get the latest changes from <code class=\"language-unknown\">master</code> I do:</p>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> checkout master <span class=\"token comment\"># switch to master branch</span>\n<span class=\"token function\">git</span> fetch origin master <span class=\"token comment\"># updating origin/master branch</span>\n<span class=\"token function\">git</span> reset <span class=\"token parameter variable\">--hard</span> origin/master <span class=\"token comment\"># reset local (master) branch to much origin/master</span>\n</code></pre></div>\n<p>I know people that do:</p>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> checkout master <span class=\"token comment\"># switch to master branch</span>\n<span class=\"token function\">git</span> pull origin master <span class=\"token comment\"># does git fetch + git merge</span>\n</code></pre></div>\n<p>But I almost never run this command because I don't want to resolve any conflicts while merging and I don't care about changes in local <code class=\"language-unknown\">master</code>.\nSometimes I may run <code class=\"language-unknown\">git pull -r origin master</code> which does <code class=\"language-unknown\">git rebase</code> instead of <code class=\"language-unknown\">git merge</code> because I don't like Merge commits.</p>\n<h2>Creating a new branch</h2>\n<p>When working on a new task I create a new branch with:</p>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> checkout <span class=\"token parameter variable\">-b</span> feat/4605-new-function\n</code></pre></div>\n<p>In the name of the branch I follow this format <br/>\n<code class=\"language-unknown\">&#x26;lt;type of task&#x26;gt;/&#x26;lt;number of ticket&#x26;gt;-&#x26;lt;short description&#x26;gt;</code>.</p>\n<h2>Committing changes</h2>\n<p>When I am ready to commit a change in the repo, I add my changes to stage phase using:</p>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token parameter variable\">-A</span>\n</code></pre></div>\n<p>I know that some people are using <code class=\"language-unknown\">git add .</code> but this command stages only the file from the current folder,\nso with you run this command in a child folder changes from the parent folder will be not staged for commit.</p>\n<h3>Git Version 2.x</h3>\n<table>\n<thead>\n<tr>\n<th>Command</th>\n<th>New Files</th>\n<th>Modified Files</th>\n<th>Deleted Files</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-unknown\">git add -A</code></td>\n<td>✔️</td>\n<td>✔️</td>\n<td>✔️</td>\n<td>Stage all (new, modified, deleted) files</td>\n</tr>\n<tr>\n<td><code class=\"language-unknown\">git add .</code></td>\n<td>✔️</td>\n<td>✔️</td>\n<td>✔️</td>\n<td>Stage all (new, modified, deleted) files in current folder</td>\n</tr>\n</tbody>\n</table>\n<p>More info <a href=\"https://stackoverflow.com/questions/572549/difference-between-git-add-a-and-git-add\">here</a>.</p>\n<p>When committing I use:</p>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> commit <span class=\"token parameter variable\">-m</span> <span class=\"token string\">\"feat: add new function\"</span>\n</code></pre></div>\n<p>To write the commit message nowadays I use <a href=\"https://www.conventionalcommits.org/en/v1.0.0-beta.2/\">Conventional Commits</a> standard.\nBut to write a good description I try to stick to this approach; <a href=\"https://chris.beams.io/posts/git-commit/\">How to Write a Git Commit Message</a>.</p>\n<h2>Amending</h2>\n<p>If I need to make a change to the previous commit I change the files and run:</p>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token parameter variable\">-A</span>\n<span class=\"token function\">git</span> commit <span class=\"token parameter variable\">--amend</span> --no-edit --no-verify\n</code></pre></div>\n<p>I add <code class=\"language-unknown\">--no-edit</code> if I want the message to stay the same and <code class=\"language-unknown\">--no-verify</code> if I am sure of the change and don't want to wait for a long <strong>pre-commit</strong> check to run.\nAll this using <strong>Ctrl + R</strong> command to search for <code class=\"language-unknown\">ame</code> text (contains in <code class=\"language-unknown\">--amend</code>).</p>\n<h2>Stashing</h2>\n<p>If I need to move between branches and have an unfinished work, I run:</p>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token parameter variable\">-A</span>\n<span class=\"token function\">git</span> stash\n<span class=\"token function\">git</span> checkout other-branch\n<span class=\"token comment\"># do some work on that branch</span>\n<span class=\"token function\">git</span> checkout wip-branch <span class=\"token comment\"># come back</span>\n<span class=\"token function\">git</span> stash pop <span class=\"token comment\"># applies and remove changes from stash stack</span>\n</code></pre></div>\n<p>If I only need to apply the stash:</p>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> stash apply\n</code></pre></div>\n<p>But once in a week or so, I clear my stash with:</p>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> stash drop\n</code></pre></div>\n<h2>Reseting</h2>\n<p>When I have done some dummy changes and I want to flush every unneeded change I run:</p>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> reset <span class=\"token parameter variable\">--hard</span> HEAD\n</code></pre></div>\n<h2>Before Pull Request</h2>\n<p>Before pushing, I check if there are no changes on the remote <code class=\"language-unknown\">master</code>. If the <code class=\"language-unknown\">origin/master</code> branch was updated I need to rebase on the new changes.</p>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> fetch\n<span class=\"token function\">git</span> log <span class=\"token parameter variable\">--oneline</span> <span class=\"token parameter variable\">--all</span> <span class=\"token parameter variable\">--graph</span> <span class=\"token comment\"># inspect any changes, mental preparation for any rebase conflicts</span>\n<span class=\"token function\">git</span> rebase origin master\n<span class=\"token function\">git</span> push <span class=\"token parameter variable\">-u</span> origin feat/4605-new-function\n</code></pre></div>\n<p>Also, I may change the history of the current branch using:</p>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> rebase <span class=\"token parameter variable\">-i</span> <span class=\"token comment\"># Let you edit the history (changing messaging, squashing, ...)</span>\n</code></pre></div>\n<h2>Another useful rebase command</h2>\n<p>Sometimes I have rebase use cases where I need to use a powerful option of rebase command.\nLet's say that I finished a task on branch <code class=\"language-unknown\">topicA</code> and created a new branch with commits for <code class=\"language-unknown\">topicB</code>.</p>\n<p>Like so:</p>\n<div class=\"remark-highlight\"><pre class=\"language-text\"><code class=\"language-text\">.\n                            H---I---J topicB\n                           /\n                  E---F---G  topicA\n                 /\n    A---B---C---D  master</code></pre></div>\n<p>Then I realize that <code class=\"language-unknown\">topicB</code> doesn't rely on changes from <code class=\"language-unknown\">topicA</code> and I should have started it from <code class=\"language-unknown\">master</code> branch.</p>\n<p>Running <code class=\"language-unknown\">git rebase master</code> will not change anything because <code class=\"language-unknown\">topicB</code> is based on <code class=\"language-unknown\">topicA</code> which itself is based on <code class=\"language-unknown\">master</code>.\nMoving <code class=\"language-unknown\">topicB</code> to start from <code class=\"language-unknown\">master</code> I run:</p>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> rebase <span class=\"token parameter variable\">--onto</span> master topicA topicB\n</code></pre></div>\n<p>Adding <code class=\"language-unknown\">topicB</code> is optional if I am already being on <code class=\"language-unknown\">topicB</code> branch</p>\n<div class=\"remark-highlight\"><pre class=\"language-text\"><code class=\"language-text\"> .\n                 H&#x26;#39;--I&#x26;#39;--J&#x26;#39;  topicB\n                /\n                | E---F---G  topicA\n                |/\n    A---B---C---D  master</code></pre></div>\n<p>I remember corect command order by <br/>\n<code class=\"language-unknown\">git rebase --onto &#x26;lt;new base&#x26;gt; &#x26;lt;old base&#x26;gt;</code></p>\n<p>More about <a href=\"https://git-scm.com/docs/git-rebase\">Git rebase</a>.</p>\n<h2>Clean up remote branches</h2>\n<p>To remove old \"red\" branches.</p>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> remote prune origin <span class=\"token comment\"># add -n for dry run</span>\n</code></pre></div>\n<p>More options <a href=\"https://www.git-tower.com/learn/git/faq/cleanup-remote-branches-with-git-prune/\">here</a>.</p>\n<h2>Commands that I use rarely</h2>\n<p>I don't use <code class=\"language-unknown\">git merge</code> that often because I am more used to <code class=\"language-unknown\">git rebase</code>, but then I need I always use <code class=\"language-unknown\">git merge --ff-only</code> to not create a Merge commit. <br/>\nI used several times <code class=\"language-unknown\">git bisect</code> to find bugs in a 40 commits range history. <br/>\nAlso <code class=\"language-unknown\">git reflog</code> to recover some changes from wrong hard resets or rebases. <br/></p>\n<h2>Conclusion</h2>\n<p>I am not that good at Git as I wish I was but I know enough to resolve almost any git related problems.\nI have friends that use Git in IDE and sometimes they ask me to help to solve a Git use case.\nAlso I now enough to search and understand any solution for a new Git use case that I encounter.</p>\n<p>I will update this post with new changes to my Git usage.\nLet me know what other commands do you use often!</p>\n"},"_superjson":{"values":{"postData.date":["Date"]}}},"__N_SSG":true}