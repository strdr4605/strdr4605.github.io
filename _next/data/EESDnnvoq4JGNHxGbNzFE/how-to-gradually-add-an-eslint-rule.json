{"pageProps":{"postData":{"title":"How to gradually add an eslint rule","date":"2022-05-17T00:00:00.000Z","description":"Sometimes you decide to add a new eslint plugin or rule to your javascript project. To not do 2000+ files change you may try to gradually change files with lint-staged.","tags":["development"],"slug":"how-to-gradually-add-an-eslint-rule","contentHtml":"<p>As your javascript project grows and new engineers are joining the team, you may try to add new eslint plugins and rules to make the code base more rigid.</p>\n<p>The problem is that often these new eslint rules may require changes in all project files, and as your project is big enough, you may have a situation when eslint rules require changes in <a href=\"/how-i-found-a-bug-in-2000-files\">2000+ files</a>.</p>\n<p>What if you could gradually enforce an eslint rule, without breaking the CI of your project.</p>\n<p>We can do this using <a href=\"https://github.com/okonet/lint-staged\">lint-staged</a>, <a href=\"https://typicode.github.io/husky/\">husky</a>, and some changes in the <code class=\"language-unknown\">.eslintrc.js</code> file.</p>\n<p>I hope you are already using <code class=\"language-unknown\">lint-staged</code> with <code class=\"language-unknown\">husky</code>. If not, please set up it.</p>\n<p>Your <code class=\"language-unknown\">.lintstagedrc.js</code> file may look something like this:</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// .lintstagedrc.js</span>\nmodule<span class=\"token punctuation\">.</span><span class=\"token property-access\">exports</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token string-property property\">'*.{js,jsx,ts,tsx}'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'prettier --write'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'eslint --quiet --fix'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string-property property\">'*.css'</span><span class=\"token operator\">:</span> <span class=\"token string\">'stylelint --fix'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string-property property\">'*.md'</span><span class=\"token operator\">:</span> <span class=\"token string\">'prettier --write'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>You may also have a script in your <code class=\"language-unknown\">package.json</code> file, that you run in CI to make sure eslint rules are followed:</p>\n<div class=\"remark-highlight\"><pre class=\"language-json\"><code class=\"language-json\">...\n<span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"eslint:run\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"eslint --ext=.js,.jsx,.ts,.tsx --quiet .\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Now let's say you want to enforce the removal of all console logs using the eslint rule <code class=\"language-unknown\">no-console</code>.</p>\n<p>In your <code class=\"language-unknown\">.eslintrc.js</code> file, set the rule to warning:</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// .eslintrc.js</span>\nmodule<span class=\"token punctuation\">.</span><span class=\"token property-access\">exports</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token spread operator\">...</span>\n  <span class=\"token literal-property property\">rules</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string-property property\">'no-console'</span><span class=\"token operator\">:</span> <span class=\"token string\">'warn'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token spread operator\">...</span>\n</code></pre></div>\n<p>Now running <code class=\"language-unknown\">npm run eslint:run</code> will just show a bunch of warnings but will pass the check.</p>\n<p>Next, you need to create a new eslintrc file that will be used only by <code class=\"language-unknown\">lint-staged</code>. Let's name it <code class=\"language-unknown\">eslintrc-staged.js</code>.\nThere you need to extend the default eslint config and override the rule to error.</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// .eslintrc-staged.js</span>\nmodule<span class=\"token punctuation\">.</span><span class=\"token property-access\">exports</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">extends</span><span class=\"token operator\">:</span> <span class=\"token string\">'./.eslintrc.js'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">rules</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string-property property\">'no-console'</span><span class=\"token operator\">:</span> <span class=\"token string\">'error'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>The last change needs to be done in <code class=\"language-unknown\">.lintstagedrc.js</code> to tell lint-staged to use another config file when running eslint.</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span><span class=\"token property-access\">exports</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token string-property property\">'*.{js,jsx,ts,tsx}'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'prettier --write'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'eslint -c eslintrc-staged.js --no-eslintrc --quiet --fix'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string-property property\">'*.css'</span><span class=\"token operator\">:</span> <span class=\"token string\">'stylelint --fix'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string-property property\">'*.md'</span><span class=\"token operator\">:</span> <span class=\"token string\">'prettier --write'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Now, when doing changes to the project, eslint will throw errors only to the files that were changed before the commit.</p>\n"},"_superjson":{"values":{"postData.date":["Date"]}}},"__N_SSG":true}