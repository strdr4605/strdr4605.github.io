{"pageProps":{"postData":{"title":"NodeJS: How to test the npm package before releasing","date":"2022-04-15T00:00:00.000Z","description":"How to test and release an npm package when it is still a Work In Progress. How to create prereleases of a NodeJS package following semver.org convention.","tags":["development","node","npm"],"slug":"node-js-how-to-test-the-npm-package-before-releasing","contentHtml":"<p>Let's say you have a <strong>core</strong> package that is used in your <strong>app</strong> and <strong>mobile</strong> projects.</p>\n<p>Now you need to do some changes, both in <strong>core</strong> and <strong>app</strong>.</p>\n<p>In the process of local development, you should test that <strong>core</strong> is working correctly with <strong>app</strong> before the release.\nYou can use <a href=\"https://docs.npmjs.com/cli/v8/commands/npm-link\"><code>npm link</code></a>, but from my experience, it's not always working as expected.</p>\n<p>A better alternative is <a href=\"https://github.com/wclr/yalc\">yalc</a>. You can check it yourself, but shortly, as the package itself says:</p>\n<blockquote>\n<p>Better workflow than <strong>npm | yarn link</strong> for package authors</p>\n</blockquote>\n<p>After everything is working locally, you are ready to do a Pull Request.\nBut wait! The CI will fail because the new version of <strong>core</strong> is only available locally.</p>\n<p>To fix this, we need a prerelease version of the <strong>core</strong> that will be installed in CI, or then other engineers will try it on their machines.</p>\n<p>Let's, say the previous version of <strong>core</strong> was <code>1.0.1</code>, and you are working on future <code>1.0.2</code>.</p>\n<p><a href=\"https://semver.org/spec/v2.0.0-rc.1.html\">Semver.org docs</a> suggests to use <code>1.0.2-rc.1</code> (release candidate),\nbut this approach does not work well when you are working on a project where many engineers can release to <strong>core</strong> before you.</p>\n<p>From my experience, the best is to have a prerelease version that is associated with some issue/ticket/task number in the format:</p>\n<p><strong><code>&#x3C;current version></code></strong>-<strong><code>&#x3C;issue number></code></strong>.<strong><code>&#x3C;WIP version></code></strong></p>\n<p>Example: <code>1.0.1-4605.0</code>, <code>1.0.1-4605.1</code> ...</p>\n<p>The important part before publishing such a prerelease version is to set a tag.\nIf you don't set a tag, the package will be published as <code>latest</code>,\nand then someone will try to install the <strong>core</strong> package, it will get the wrong \"<code>latest</code>\" version which may still be WIP.<br>\nFor this, you might use the <code>dev</code> tag.</p>\n<h2>So, the workflow</h2>\n<ol>\n<li>You do changes in <strong>core</strong></li>\n<li>Use the WIP version of <strong>core</strong> in <strong>app</strong> locally using <code>yalc</code></li>\n<li>When the task is ready:</li>\n</ol>\n<ul>\n<li>Change the version of <strong>core</strong>: <code>1.0.1-4605.0</code></li>\n<li>Publish the WIP version: <code>npm publish --tag dev</code></li>\n<li>Update the <strong>app</strong> with WIP version of <strong>core</strong></li>\n<li>Do move WIP prereleases if needed: <code>1.0.1-4605.1</code></li>\n</ul>\n<ol start=\"4\">\n<li>Create PRs for both projects</li>\n<li>When <strong>core</strong> PR is approved</li>\n</ol>\n<ul>\n<li>Merge <strong>core</strong></li>\n<li>Set new version <code>1.0.2</code></li>\n<li>Publish <strong>core</strong>: <code>npm publish</code> (<code>latest</code> tag is default)</li>\n</ul>\n<ol start=\"6\">\n<li>Update <strong>app</strong> PR with new version of <strong>core</strong></li>\n<li>Merge <strong>app</strong> changes into master</li>\n<li>Happy coding</li>\n</ol>\n"},"_superjson":{"values":{"postData.date":["Date"]}}},"__N_SSG":true}