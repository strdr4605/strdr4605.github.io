{"pageProps":{"postData":{"title":"My biggest Pull Request","date":"2020-07-25T00:00:00.000Z","description":"Lessons learned from my biggest Pull Request. What to do when the Pull Request is too big?!","tags":["development"],"slug":"my-biggest-pull-request","contentHtml":"<h2>The story</h2>\n<p>I was working on a white-label mobile application in active development.\n<em>(If you plan to develop a white-label mobile app, JUST DON'T!!!</em> ðŸ˜… <em>But this is a story for another post.)</em>\nI implemented a <strong>BIG FEATURE</strong> that was very tightly coupled with back-end implementation.</p>\n<p>The PRs were created, reviewed, and approved by front-end and back-end teams.\nEverything was tested, some small bugs were found, I fixed them and was ready for merging to <code>master</code> branch.\nBut some severe bugs and priority features had to be done,\nso the back-end developer had to switch working on them and the back-end implementation was not shipped in production.</p>\n<p>I didn't want to merge my commits in <code>master</code> branch,\nas the implementation in back-end may be changed after addition of other requirements\nand decided to wait until the back-end developer will be free and ready to merge his implementations.</p>\n<p>I thought that the feature will be shipped the week after.</p>\n<p>Meanwhile, I started working on the next feature that was based on the <strong>BIG FEATURE</strong>.\nWhen I finished I didn't create a new PR in <code>master</code> branch as the <code>feature2</code> branch included changes from <code>feature1</code>.\nAfter a week I asked the back-end developer about the status with <strong>BIG FEATURE</strong> shipment to production,\nbut he was busy with other tasks and as the app was in active development I continued developing on top of <strong><code>big-feature</code></strong> branch.</p>\n<p>I was working alone in that repo and the front-end devs were helping me only with pair programming or opinions on feature implementations.\nNo one needed my changes and I took the easy path of just working on features/bugs and creating builds directly for testers and onboarding clients.</p>\n<p>Time has passed, the back-end developer forgot about the <strong>BIG FEATURE</strong>.\nI was working on features and bug fixes.\n<code>feature5</code>, <code>feature10</code>, <code>feature13</code>, <code>bugfix12</code>, <code>refactor2</code> branches were all created on top of <strong><code>big-feature</code></strong> branch.</p>\n<p>One day I understood that the PR in <code>master</code> branch will be an <strong>ENORMOUS</strong> lesson for me and the team.\nAnother developer joined the project so I created a new <code>dev</code> branch from <code>feature16</code> and for the last 2 weeks, we created and reviewed PRs in <code>dev</code> branch.</p>\n<p>Finally after <strong>140 days</strong> from the beginning of <strong>BIG FEATURE</strong> the back-end implementation was merged and shipped to prod.</p>\n<p>And I was ready for <strong>my biggest Pull Request</strong> <em>(so far)</em>.</p>\n<h2>The Pull Request</h2>\n<p><img src=\"bitbucket-warn.png\" alt=\"bitbucket-warn\"></p>\n<p>It was so big that BitBucket couldn't display it. The only way to review it was by checking each commit separately or maybe using a desktop git client.\nAdditional complexity added mobile-specific files that were generated by XCode and Android Studio.</p>\n<h3>Stats:</h3>\n<ul>\n<li><strong><code>420 files changed, 25739 insertions(+), 19429 deletions(-)</code></strong> <br/>\nBeside 420 files maybe 20-40 files were added and removed in between. <br/></li>\n<li>Changes from <strong>140 days</strong> <br/></li>\n<li><strong>163 commits</strong> <br/></li>\n<li><strong>36 intermediary branches</strong></li>\n</ul>\n<p>In the end, I received 3 approves and only <strong>one comment</strong>.</p>\n<blockquote>\n<p>\"Omg\" - Tech Lead (implemented the back-end for <strong>BIG FEATURE</strong>)</p>\n</blockquote>\n<h2>Lessons learned</h2>\n<ul>\n<li>Make small PRs.</li>\n<li>One feature | bug-fix | refactor per PR.</li>\n<li>If the PRs includes several features squash commits to have one commit per feature <br/>\nand let the team review each commit separately.</li>\n<li>Donâ€™t squash everything. <br/>\nLet styling/formatting commits be separate from implementation commits.</li>\n<li>Create <code>temporary-master</code> branches <br/>\nIf features relay on other features that are not in <code>master</code>.\nOr you are working on a <strong>BIG FEATURE</strong>, divide <strong>BIG FEATURE</strong> in <em>big-feature-phase-1</em>, <em>big-feature-phase-2</em>.\nCreate temporary branches like <code>dev</code> and make PRs in <code>dev</code>.</li>\n<li>Create <code>\"Fix PR comments\"</code> commits and then squash them. <br/>\nIf PR is big and you have several comments, fix them in a separate commit and let reviewers check only it.\nAfter approval squash <code>\"Fix PR comments\"</code> commit in previous feature commit.</li>\n<li>Be kind to your reviewers.</li>\n<li>Make small PRs.</li>\n</ul>\n"},"_superjson":{"values":{"postData.date":["Date"]}}},"__N_SSG":true}