{"componentChunkName":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx","path":"/commitlint-custom-commit-message-with-emojis","result":{"data":{"post":{"__typename":"MdxPost","slug":"/commitlint-custom-commit-message-with-emojis","title":"Commitlint: custom commit message with emojis","date":"11.01.2022","tags":[{"name":"tools","slug":"tools"},{"name":"git","slug":"git"},{"name":"npm","slug":"npm"}],"description":"A guide to customize the commitlint to your need and use it as convention in your git repository. Customize commitlint header format to use emojis.","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Commitlint: custom commit message with emojis\",\n  \"date\": \"2022-01-11T00:00:00.000Z\",\n  \"description\": \"A guide to customize the commitlint to your need and use it as convention in your git repository. Customize commitlint header format to use emojis.\",\n  \"tags\": [\"tools\", \"git\", \"npm\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://commitlint.js.org/\"\n  }), \"Commitlint@16.0.2\"), \" is the next step on enforcing rules in your JS project after eslint.\"), mdx(\"p\", null, \"Installation and configuration is very simple:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"echo \\\"module.exports = {extends: ['@commitlint/config-conventional']}\\\" > commitlint.config.js\\n\")), mdx(\"p\", null, \"Commitlint suggests \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.conventionalcommits.org/en/\"\n  }), \"Conventional commits\"), \" which have this format:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"type(scope?): subject\\n\")), mdx(\"p\", null, \"But what if I want to use a custom format specific to my team?! Let's say I want to use emoji as a type, an optional ticket, and then the subject, like:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"type [ticket]? subject\\n\")), mdx(\"p\", null, \"To change the header format I need to change \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"headerPattern\"), \" from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"parserOpts\"), \" config:\"), mdx(\"p\", null, \"First I need to find a RegExp that will match \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\\"\\u2705 [T-4605] Add tests\\\"\"), \", also we need to add at least one rule so let's add \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"type-enum\"), \" that is \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://commitlint.js.org/#/reference-rules\"\n  }), \"provided by commitlint\"), \" to set allowed emojis\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// commitlint.config.js\\n// emojis like \\\"\\u2705 \\\", \\\"\\uD83D\\uDE02 \\\", ...\\nconst matchAnyEmojiWithSpaceAfter =\\n  /(\\\\u00a9|\\\\u00ae|[\\\\u2000-\\\\u3300]|\\\\ud83c[\\\\ud000-\\\\udfff]|\\\\ud83d[\\\\ud000-\\\\udfff]|\\\\ud83e[\\\\ud000-\\\\udfff])\\\\s/;\\nconst matchOptionalTicketNumberWithSpaceAfter = /(?:\\\\[(T-\\\\d+)\\\\]\\\\s)?/; // \\\"[T-4605] \\\", \\\"[T-1]\\\"\\nconst subjectThatDontStartWithBracket = /([^\\\\[].+)/; // \\\"Add tests\\\" but don't allow \\\"[ Add tests\\\"\\n\\nmodule.exports = {\\n  parserPreset: {\\n    parserOpts: {\\n      headerPattern: new RegExp(\\n        \\\"^\\\" +\\n          matchAnyEmojiWithSpaceAfter.source +\\n          matchOptionalTicketNumberWithSpaceAfter.source +\\n          subjectThatDontStartWithBracket.source +\\n          \\\"$\\\"\\n      ),\\n      headerCorrespondence: [\\\"type\\\", \\\"ticket\\\", \\\"subject\\\"],\\n    },\\n  },\\n  rules: {\\n    \\\"type-enum\\\": [2, \\\"always\\\", [\\\"\\u2B50\\uFE0F\\\", \\\"\\uD83D\\uDC1E\\\", \\\"\\u2705\\\", \\\"\\uD83D\\uDEA7\\\", \\\"\\u267B\\uFE0F\\\", \\\"\\uD83D\\uDCDD\\\"]],\\n  },\\n};\\n\")), mdx(\"p\", null, \"Testing locally:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"> echo \\\"\\u2705 [T-4605] Add tests\\\" | commitlint # passes\\n> echo \\\"\\u2705 Add tests\\\" | commitlint # passes\\n> echo \\\"Something else\\\" | commitlint # should fail but still passes \\uD83E\\uDD14\\n\")), mdx(\"p\", null, \"The problem is that there is no rule to make sure that the header matched our RegExp. I can add 2 other rules from commitlint:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"\\\"type-empty\\\": [2, \\\"never\\\"],\\n\\\"subject-empty\\\": [2, \\\"never\\\"],\\n\")), mdx(\"p\", null, \"but what if I have other variables names, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"emoji\"), \" instead of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"type\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"desc\"), \" instead of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"subject\"), \"?\"), mdx(\"p\", null, \"I need to create a custom rule using \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://commitlint.js.org/#/reference-plugins\"\n  }), \"Commitlint plugins\"), \".\\nLet's name the rule \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"header-match-team-pattern\"), \" and also use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"emoji\"), \" instead of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"type\"), \". In the rule, we check if all variables are \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"null\"), \" and return a message\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"...\\n      headerCorrespondence: [\\\"emoji\\\", \\\"ticket\\\", \\\"subject\\\"],\\n    },\\n  },\\n  plugins: [\\n    {\\n      rules: {\\n        \\\"header-match-team-pattern\\\": (parsed) => {\\n          const { emoji, ticket, subject } = parsed;\\n          \\n          if (emoji === null && ticket === null && subject === null) {\\n            return [\\n              false,\\n              \\\"header must be in format '\\u2705 [T-4605] Add tests' or '\\u2705 Add tests'\\\",\\n            ];\\n          }\\n          return [true, \\\"\\\"];\\n        },\\n      },\\n    },\\n  ],\\n  rules: {\\n    \\\"header-match-team-pattern\\\": [2, \\\"always\\\"],\\n...\\n\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"You can \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"console.log({ parsed })\"), \", for debugging\")), mdx(\"p\", null, \"Now let's create a better \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"type-enum\"), \" rule, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"explained-emoji-enum\"), \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"...\\n        \\\"explained-emoji-enum\\\": (parsed, _when, emojisObject) => {\\n          const { emoji } = parsed;\\n          if (emoji && !Object.keys(emojisObject).includes(emoji)) {\\n            return [\\n              false,\\n              `emoji must be one of:\\n${Object.keys(emojisObject)\\n                .map((emojiType) => `${emojiType} - ${emojisObject[emojiType]}`)\\n                .join(\\\"\\\\n\\\")}`,\\n            ];\\n          }\\n          return [true, \\\"\\\"];\\n        },\\n      },\\n    },\\n  ],\\n  rules: {\\n    ...\\n    \\\"explained-emoji-enum\\\": [\\n      2,\\n      \\\"always\\\",\\n      {\\n        \\\"\\u2B50\\uFE0F\\\": \\\"New feature\\\",\\n        \\\"\\uD83D\\uDC1E\\\": \\\"Bugfix\\\",\\n        \\\"\\u2705\\\": \\\"Add, update tests\\\",\\n        \\\"\\uD83D\\uDEA7\\\": \\\"Work in progress\\\",\\n        \\\"\\u267B\\uFE0F\\\": \\\"Refactor\\\",\\n        \\\"\\uD83D\\uDCDD\\\": \\\"Documentation update\\\",\\n      },\\n    ],\\n  },\\n...\\n\")), mdx(\"p\", null, \"And when the engineer will set a wrong emoji it will have a error like:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"> echo \\\"\\uD83D\\uDE02 Add tests\\\" | commitlint                                                                                                                                 \\n\\u29D7   input: \\uD83D\\uDE02 Add tests\\n\\u2716   emoji must be one of:\\n\\u2B50\\uFE0F - New feature\\n\\uD83D\\uDC1E - Bugfix\\n\\u2705 - Add, update tests\\n\\uD83D\\uDEA7 - Work in progress\\n\\u267B\\uFE0F - Refactor\\n\\uD83D\\uDCDD - Documentation update [explained-emoji-enum]\\n\\n\\u2716   found 1 problems, 0 warnings\\n\")), mdx(\"h2\", {\n    \"id\": \"final-result\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#final-result\",\n    \"aria-label\": \"final result permalink\",\n    \"className\": \"remark-autolink-headers before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"height\": \"20\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"20\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Final result\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// commitlint.config.js\\n// emojis like \\\"\\u2705 \\\", \\\"\\uD83D\\uDE02 \\\", ...\\nconst matchAnyEmojiWithSpaceAfter =\\n  /(\\\\u00a9|\\\\u00ae|[\\\\u2000-\\\\u3300]|\\\\ud83c[\\\\ud000-\\\\udfff]|\\\\ud83d[\\\\ud000-\\\\udfff]|\\\\ud83e[\\\\ud000-\\\\udfff])\\\\s/;\\nconst matchOptionalTicketNumberWithSpaceAfter = /(?:\\\\[(T-\\\\d+)\\\\]\\\\s)?/; // \\\"[T-4605] \\\", \\\"[T-1]\\\"\\nconst subjectThatDontStartWithBracket = /([^\\\\[].+)/; // \\\"Add tests\\\" but don't allow \\\"[ Add tests\\\"\\n\\nmodule.exports = {\\n  parserPreset: {\\n    parserOpts: {\\n      headerPattern: new RegExp(\\n        \\\"^\\\" +\\n          matchAnyEmojiWithSpaceAfter.source +\\n          matchOptionalTicketNumberWithSpaceAfter.source +\\n          subjectThatDontStartWithBracket.source +\\n          \\\"$\\\"\\n      ),\\n      headerCorrespondence: [\\\"emoji\\\", \\\"ticket\\\", \\\"subject\\\"],\\n    },\\n  },\\n  plugins: [\\n    {\\n      rules: {\\n        \\\"header-match-team-pattern\\\": (parsed) => {\\n          const { emoji, ticket, subject } = parsed;\\n          if (emoji === null && ticket === null && subject === null) {\\n            return [\\n              false,\\n              \\\"header must be in format '\\u2705 [T-4605] Add tests' or '\\u2705 Add tests'\\\",\\n            ];\\n          }\\n          return [true, \\\"\\\"];\\n        },\\n        \\\"explained-emoji-enum\\\": (parsed, _when, emojisObject) => {\\n          const { emoji } = parsed;\\n          if (emoji && !Object.keys(emojisObject).includes(emoji)) {\\n            return [\\n              false,\\n              `emoji must be one of:\\n${Object.keys(emojisObject)\\n                .map((emojiType) => `${emojiType} - ${emojisObject[emojiType]}`)\\n                .join(\\\"\\\\n\\\")}`,\\n            ];\\n          }\\n          return [true, \\\"\\\"];\\n        },\\n      },\\n    },\\n  ],\\n  rules: {\\n    \\\"header-match-team-pattern\\\": [2, \\\"always\\\"],\\n    \\\"explained-emoji-enum\\\": [\\n      2,\\n      \\\"always\\\",\\n      {\\n        \\\"\\u2B50\\uFE0F\\\": \\\"New feature\\\",\\n        \\\"\\uD83D\\uDC1E\\\": \\\"Bug fix\\\",\\n        \\\"\\u2705\\\": \\\"Add, update tests\\\",\\n        \\\"\\uD83D\\uDEA7\\\": \\\"Work in progress\\\",\\n        \\\"\\u267B\\uFE0F\\\": \\\"Refactor\\\",\\n        \\\"\\uD83D\\uDCDD\\\": \\\"Documentation update\\\",\\n      },\\n    ],\\n  },\\n};\\n\")), mdx(\"h2\", {\n    \"id\": \"next-steps\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#next-steps\",\n    \"aria-label\": \"next steps permalink\",\n    \"className\": \"remark-autolink-headers before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"height\": \"20\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"20\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Next steps\"), mdx(\"p\", null, \"I can add \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://commitlint.js.org/#/reference-rules\"\n  }), \"some rules from Commitlint\"), \" or create other custom ones.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"Put the config in a \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://commitlint.js.org/#/concepts-shareable-config\"\n  }), \"new package\"), \".\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"Add \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"husky\"), \" and use it in every company repo on the pre-commit hook.  \"));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"Commitlint@16.0.2  is the next step on enforcing rules in your JS project after eslint. Installation and configuration is very simple…","timeToRead":1,"banner":null}},"pageContext":{"slug":"/commitlint-custom-commit-message-with-emojis","formatString":"DD.MM.YYYY"}},"staticQueryHashes":["3090400250","3090400250","318001574"]}